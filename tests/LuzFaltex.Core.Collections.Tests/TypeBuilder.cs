//
//  TypeBuilder.cs
//
//  Author:
//       LuzFaltex Contributors <support@luzfaltex.com>
//
//  Copyright (c) LuzFaltex, LLC.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

using Unit = Applications.Core.Common.Tests.Collections.MultiValueDictionaryTests.NullKeyTests.Unit;

namespace LuzFaltex.Core.Collections.Tests
{
    /// <summary>
    /// A type which yields values generated by <see cref="Random"/>.
    /// </summary>
    /// <remarks>The values are not generated randomly, but were generated once and stored in static arrays.</remarks>
    public sealed class TypeBuilder : IDisposable
    {
        private readonly Lock _lock = new();

        private static readonly int[] Integers =
        [
            34,
            20,
            15,
            42,
            22,
            37,
            9,
            32,
            48,
            33,
            35,
            43,
            22,
            25,
            20,
            37,
            29,
            24,
            3,
            23,
            32,
            34,
            45,
            9,
            6,
            47,
            8,
            18,
            35,
            28,
            32,
            39,
            24,
            3,
            9,
            2,
            40,
            33,
            21,
            30,
            12,
            42,
            14,
            22,
            11,
            26,
            32,
            33,
            7,
            27
        ];

        private static readonly string[] Strings =
        [
            "D10tcKXsm43/jZrJNmS1lp6i0A93oQluTEw1F+JGDcVr6Nuwb0/L2vUcY9mPhIWjT0Y=",
            "7F/kCP66grVFpukQSojVwmBF6osYCQOsZ2rxcyLSDaDkX6LyR5X4LhSLRpOvKmYCA+c=",
            "H2MQwVFBRhxrsn4o4aKAEGxUED7XDSKgGru46+1xXZD7ETrNQ25yQl8DnRfdWLI1wXw=",
            "/HboSsUG2MUXgFRrl8H5+/+1ISqmImuIN9A17J+5olrUuEBZchRvsLdhwzENevbD1XY=",
            "a/pPft9lc4tm+p7kLcZdon4oD3QtH8dYPysUCqE6NdY/Iml8wzXFcYfBhL2aD3gxziA=",
            "0BgaM+vfc6mlxTBs0u/Sx1YnUETqUwioaWGw2EH5HhDSkklEDDZtqx0sgKr8lYmaTng=",
            "Aui8RKIwLm2rYMoT5JuqIcl/fX3aqO8A4btgp7MCiAs0KWIvsakx8Oekfy9TVUKR4qg=",
            "TGxwN4wwOs+E9LMz/QytTURLFcXlDkoOfbtbL2UyTbBIVkPilYQIoVkI0bSYcrZAIqE=",
            "+ha7Qq/B8o6Gsa/BFst0dowZxqQzlrGWjHE8Z2fHa/heMfAASzMmCTPSTafAgwslGS8=",
            "dS137AWGn35h1zTV7Ny+Gr9IKZ8gBDAAGkw1Jr38GcvWaCNGyJwtRaXt47YDv0MM0G0=",
            "dPqW3F062fgLY/IYa12bF+NbgcYTrR89ADLSEMoCemBI5+w+dq1zzEatIbTMz5JEIGM=",
            "HzEg15RkdmTnmtraagZ7XvZRtAfuY49KdyBjEgCE5r7aCf9rKGtwTmMPgmX9xdi0f4I=",
            "F+rg00GW9FXRx0Yl/qqoLojD/gO27qW1UBuA+tqSQehNdIaWwIf5JX6aiNflzQCM3+o=",
            "bRfVgjwyz+2DRLd89EZ2PyDab7mC/wfYqZb/6Pf6cJQBAYFEBfZEQ0XABv7iCib3ZN0=",
            "wmstB/JIV2HwBfU9+hBeCf+HfafCZBK3xywwybhgeNcdRQ17qc7jWSDaWbc7PMAzYzM=",
            "hb4a1yNpyOXPH6UqHr1lDSIYW76UUjc2zQiys4tLK4X0Q0unauqTYrT0bwlirRSJLXE=",
            "VOvISfh+/lN/4tUTUTGNW4MowHy5aau8ZAJaLb5zfQsk+T3eJAppzDfgX30xMkHMV4A=",
            "W8vbG82gEDWtjwMtechhLI3RsH8n6c+FSuQyCHmQAxv466jV6ftioHEBB7DhsTVg8zs=",
            "AJRzEQWW7J1fJS59IJrqA4hVSzp2t/TZ3jGDKTXttyD2fMoQ7kgZU8s5GqOa99SD38I=",
            "sQ8El1X3TfEUXNTQ7aQx29ajFy3q9a12rVHl0fb9hYqu2ME3wPok0l7DL6YgnKKibCk=",
            "cAcXy/m5te3RXSGhT+WiwhEgaL3/tZzk/glT1jLtJZwV3uhGM2E6bDCeVOYknVbjyaM=",
            "BhWLHyzT1HXA5JmDaLBVI7PSy+5rHRdNIpHXiWp0w7MalZz8Wbq4b3YgAAf99pyv4sU=",
            "siuhPJYZcyXc49IGtXfMUZFOMRPAvoOo0Gpv3dgPp882lh0h3eb7+8eRfatcR6dywRc=",
            "X2dO66EB8IlrlGlNh0TSFkqYdZFPBkAOdBPtdPTgCV5WO6ExLEZ8eFrRriN9hrvP9+M=",
            "UWqSYFVWIX2aM13F/x3vUja79JXLUA6CZkeH41yGgviVE+GMK7gLHPRqqdjnfYb90Ro=",
            "88PBmqUA/2IcD0R+7I2+boYBu2Uw3mMv2cPdXMJpXKNAMd4Xs5w8EYiPm/c6zRWK1zU=",
            "x8yIUFYt5j7sje6lxNClzxnxavphpBT3YFsskFNpau8WrzeJhf+K+khiZEBG/mh7Zl8=",
            "8Uu3rJliPq2YhuVWgEo2YHzbztM8u4QO7i1841pb5I+KWlIt+xOPpb5xwgYgCm6X/Tg=",
            "YsQXGHDIw7Qg32C5UvJ4YvSdDnQ3N/5if2vEcfJE26XoVR4tP01M5qQyN6l40i4Id3Y=",
            "NnGTXTCjvZFaujTcxbhdG9xOlJQPkmEjXd7O8LW0Qoieg2MxmDqu0WrlcLZpkm4Rm5E=",
            "QsI50W2KheDPVHxdPubUSY8Is9/c68L7I3wV8Kp3UkfbXljEWoqk8CwktXs5icZZ10w=",
            "5UZPz5CPvYrJOLmFs52r+rQK0lmWjl/N1PIK14VC8+Qs8hFhqLug2zKYeZxF4uosMmQ=",
            "0vL1ZNNMGe4kcBLRVt5sQY4KkChzJthOMEBOxzJc1GsFACZn8TxBF10x87rd1epEXek=",
            "0GNHMO96RuMN74/oKzEC3uCRysJrfVAW2LRE5qPWLgPw0Xp5ees5VatqowJS8mkhbog=",
            "81+uBC/NT4tuxm+UI9/q/qm0JzIh4s8rANCJfUQGPHJblXMb1EW371O/Aj28K4dOGSE=",
            "KACQ+ZO8K91PRWRuxX5WlIWJLJ16yhiOpfY4E4o7bzaPT/iGGdYBfTtDLWi+8IGX9Ak=",
            "XaLwQp++2TTHuf1WuXV/fvvZL+85y5JukTxzrmrxFGTKnWGsdv25lVJbPCp8JjWkWvc=",
            "KCqXwPPFv1OUNw+xLEq1lKYQ2XM64xd0P2qlG6y4AEAmuByX4nQlSMMTY3/9gsPg3Hw=",
            "b7UPVA+o6O0cWmfqQfjJ8TpGEPidRZY/l0wCFsSqhLkCQItVR0TOjjjmUmuOwYGYRo0=",
            "OqQOKX1aMDcvzVyBDyStxF8OhprMQsHVMAQHlWbMkJqQna0ic/llkm4FAPcj4T+o120=",
            "CMGbSb5tCjKFyWzB9p07jEc7n54Up8btR95WbidVvewelmJ71iPLZnDweqldQo+VYJM=",
            "nAcwjRnzm8+EShALeakCO9JxQNVyyr3OPMp9GMQB8BE6Gt5vmxduzjWSt8PLUfn+9J4=",
            "fvxTkkfyRKQA9eqekXq1wG2x7c5/kU7oG2ckkJOXQejuobnpmIEueePHOewDUB8Seqs=",
            "/Z7uGmdRVio3VrV6mFWtOKXqFHYnWnTCcyFKlbkE0UB1GZKf1X89c5/bMtjFGjOXmDI=",
            "/BrUEuqwDU1d23arSbQk5B3K/yyjRKWY/1AosjaAa3AJkb7ebrtcXZnGGyi4cCFkiUc=",
            "yz/gkzqfaeZyasZYaOc0IYwTAhWK48Ke7rlMjkcrlvAfCnmnsXa6mxu8PNIK24MgXM0=",
            "stVxmQzDF7B2jx+RDxjbUfjLEiMsVoSY1wAz8yvpek+8ZQkN1PoS7POTgPF+3XCvUaM=",
            "chceLI+HiFYdne2smv1OqEQOpiRMhR+dAGl9km1KQCP08W0+Jz2akOtwV/YqvqQ+0R4=",
            "xRmQ2ZjPilUurdo4tqJvNBW8hpadfuhwdiZdMvJiMswiq/KZ1EcsbWTuAYSmlBNrOZ8=",
            "EUTJMsD/dNpE6OAP3nmFIRSlMAfm1cmRqnNoRzvocP9RajT+BAmGJfIpzmfqlX4P4dU="
        ];

        private static readonly char[] Characters =
        [
            '#',
            '0',
            '1',
            '',
            '',
            '1',
            ')',
            '',
            '\r',
            '',
            '',
            '',
            '\'',
            '!',
            '',
            '\'',
            '',
            '',
            '+',
            '.',
            '',
            '',
            '',
            ')',
            '',
            '',
            '',
            '',
            '0',
            '"',
            '',
            '',
            '"',
            '\n',
            '',
            '',
            '',
            '\n',
            '',
            '\t',
            '\'',
            '/',
            '',
            '',
            '',
            '',
            '*',
            '\t',
            '',
            '',
        ];

        private int _intPtr = 0;
        private int _strPtr = 0;
        private int _charPtr = 0;

        /// <summary>
        /// Gets the next value in the series.
        /// </summary>
        /// <typeparam name="TValue">The type of the value to retrieve. Must be <see langword="int"/>, <see langword="string"/>, <see langword="char"/>, or <see cref="Unit"/>.</typeparam>
        /// <returns>A value generated by a random number generator.</returns>
        /// <exception cref="ArgumentException"><typeparamref name="TValue"/> is not <see langword="int"/>, <see langword="string"/>, <see langword="char"/>, or <see cref="Unit"/>.</exception>
        public TValue GetNext<TValue>()
        {
            using (_lock.EnterScope())
            {
                return GetNextInternal<TValue>();
            }
        }

        private TValue GetNextInternal<TValue>()
        {
            if (typeof(TValue) == typeof(Unit))
            {
                return (TValue)(object)Unit.Default;
            }

            if (typeof(TValue) == typeof(int))
            {
                return (TValue)(object)Integers[_intPtr++ % (Integers.Length - 1)];
            }

            if (typeof(TValue) == typeof(string))
            {
                return (TValue)(object)Strings[_strPtr++ % (Strings.Length - 1)];
            }

            if (typeof(TValue) == typeof(char))
            {
                return (TValue)(object)Characters[_charPtr++ % (Characters.Length - 1)];
            }

            throw new ArgumentException();
        }

        /// <summary>
        /// Gets the next value, excluding those defined in <paramref name="except"/>.
        /// </summary>
        /// <typeparam name="TValue">The type of the value to retrieve. Must be <see langword="int"/>, <see langword="string"/>, <see langword="char"/>, or <see cref="Unit"/>.</typeparam>
        /// <param name="except">Values the return value should not be equal to.</param>
        /// <returns>A value generated by a random number generator.</returns>
        /// <exception cref="ArgumentException"><typeparamref name="TValue"/> is not <see langword="int"/>, <see langword="string"/>, <see langword="char"/>, or <see cref="Unit"/>.</exception>
        public TValue GetNext<TValue>(params TValue[] except)
        {
            using (_lock.EnterScope())
            {
                TValue ret;
                do
                {
                    ret = GetNextInternal<TValue>();
                }
                while (except.Contains(ret));

                return ret;
            }
        }

        /// <summary>
        /// Method to create an <see cref="ICollection{T}"/> (where the values are
        /// picked using <see cref="GetNext{TValue}()"/> method) with the given
        /// <paramref name="count"/> of elements inside of it.
        /// </summary>
        /// <typeparam name="T">The type that the returned collection will contain.</typeparam>
        /// <typeparam name="TCollection">The type of the collection to return.</typeparam>
        /// <param name="count">The number of elements in the returned collection.</param>
        /// <returns>A new collection containing <paramref name="count"/> elements of type <typeparamref name="T"/>.</returns>
        public TCollection CreateRange<T, TCollection>(int count)
            where TCollection : ICollection<T>, new()
        {
            using (_lock.EnterScope())
            {
                var ret = new TCollection();
                for (int i = 0; i < count; i++)
                {
                    ret.Add(GetNextInternal<T>());
                }
                return ret;
            }
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            _intPtr = 0;
            _strPtr = 0;
            _charPtr = 0;
        }
    }
}
